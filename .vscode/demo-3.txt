Tenemos las siguiente funciones:
    -elem :: a -> [a] -> bool
    -elem a [] = false
    -elem a x:xs = e == x || elem xs

    -objetos_en :: Universo -> [Objeto]
    -objetos_en universo = rights universo

    -rights [Either a b] -> [b]
    -rights [] = []
    -rights (Right x):xs = x: rights xs
    -rights (Left y):xs = rights xs

Queremos ver que ∀ u :: Universo . ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u
Probemos por induccion sobre u, tal que u::[Either Objeto Personaje]
tomamos P(u): ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u 

CASO BASE:
-Pruebo que vale P([]):
    -elem o (objetos_en []) = elem o (rights [])                           -Por def de objetos_en
                            = elem o []                                    -Por def de rights
                            = False                                        -Por def de elem

    -Como el primer lado de la implicacion es False, la implicacion va ser siempre True. Por lo tango vale P([]) 

H.I:
-Supongo que vale P(U): ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u
-Quiero ver que ∀ e::Either Objeto Personaje vale P(e:u): ∀ o :: Objeto . elem o (objetos_en e:u) ⇒ elem (Right o) e:u 
-probemos:
    -tengo que:
        -Tomo x::Objeto

        elem o (objetos_en e:u) = elem o (rights e:u)                                                       -Por def de objetos_en 
                                = elem o (if e == right x then x:rights u else rights u)                    -Por def de rights

    -divido en casos:
        -si e = right x:
            -elem o x:rights u =  o == x | elem o rights u                                                  -por def de elem

            -tomo q = o == x | elem o rights u. si puede pasar que q = False o q = True:
                -Si q = False:

                    -El primer lado de la implicacion va ser False, por lo tanto la implicacion
                     va ser siempre verdadera, por lo tanto vale P(e:u)

                -si q = True:

                    -O bien o==x = True, o bien elem o (rights u) = True
                        -Si o == x = True:

                            -como o == x luego e = Right x = Right o, por lo tanto elem (Right o) e:u = True
                            como ambos lados de la implicacion son verdaderas, vale la implicacion y
                            por lo tanto vale P(e:u)

                        -Si elem o (rights u) = True:

                            -sabemos que elem o (rights u) = elem o (objetos_en u) por def de objetos_en
                            -luego por HI vale que ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u
                            -que a su vez elem (Right o) u ⇒ elem (Right o) e:u, por lo tanto vale P(e:u)

        -por ultimo nos queda si e!= Right x:

            -luego tenemos que elem o (objeto_en e:u) = elem o (rights e:u) = elem o (rights u)
            -por definicion de objetos_ en sabemos que elem o (rights u) = elem o (objetos_en u)
            -luego por HI vale que ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u
            -que a su vez elem (Right o) u ⇒ elem (Right o) e:u, por lo tanto vale P(e:u)

Como probamos P([]) y A partir de P(U) probamos que vale P(e:u), tenemos que ∀u::Either Personaje Objetos
vale P(U).



